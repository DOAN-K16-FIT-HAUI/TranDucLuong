rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // TRANSACTIONS
    match /users/{userId}/transactions/{transactionId} {
      allow read: if isUserAuthenticated() && request.auth.uid == userId;
      allow create: if isUserAuthenticated() && 
                      request.auth.uid == userId &&
                      request.resource.data.userId == userId &&
                      validateTransactionData(request.resource.data);
      allow update: if isUserAuthenticated() && 
                      request.auth.uid == userId && 
                      request.resource.data.userId == userId &&
                      validateTransactionData(request.resource.data);
      allow delete: if isUserAuthenticated() && request.auth.uid == userId;
    }

    // USERS + subcollections
    match /users/{userId} {
      allow read, update: if isUserAuthenticated() && request.auth.uid == userId;
      allow create: if isUserAuthenticated();
      allow delete: if false;

      match /wallets/{walletId} {
        allow read: if isUserAuthenticated() && request.auth.uid == userId;
        allow create: if isUserAuthenticated() && 
                        request.auth.uid == userId &&
                        validateWalletData(request.resource.data);
        allow update: if isUserAuthenticated() && 
                        request.auth.uid == userId &&
                        validateWalletData(request.resource.data);
        allow delete: if isUserAuthenticated() && request.auth.uid == userId;
      }

      match /summaries/{summaryId} {
        allow read: if isUserAuthenticated() && request.auth.uid == userId;
        allow create, update: if isUserAuthenticated() && 
                                request.auth.uid == userId &&
                                validateSummaryData(request.resource.data);
        allow delete: if false; // Summaries should not be deleted
      }

      match /groupMemberships/{groupId} {
        allow create: if isUserAuthenticated() && request.auth.uid == userId;
        allow read, update, delete: if isUserAuthenticated() && request.auth.uid == userId;
      }
    }

    // Legacy transaction path (for backward compatibility)
    match /transactions/{transactionId} {
      allow read: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
      // Migration should happen through admin or server functions
      allow write: if false;
    }

    // GROUP NOTES
    match /groupNotes/{noteId} {
      allow create: if isUserAuthenticated() && 
                      request.resource.data.createdBy == request.auth.uid;
      allow read: if isUserAuthenticated() && 
                    (request.auth.uid == resource.data.createdBy || 
                     isGroupMember(resource.data.groupId));
      allow update: if isUserAuthenticated() && 
                      (request.auth.uid == resource.data.createdBy || 
                       isGroupAdmin(resource.data.groupId));
      allow delete: if isUserAuthenticated() && 
                      (request.auth.uid == resource.data.createdBy || 
                       isGroupAdmin(resource.data.groupId));
                      
      // Comments subcollection
      match /comments/{commentId} {
        allow create: if isUserAuthenticated() && 
                        request.resource.data.userId == request.auth.uid &&
                        isGroupMember(get(/databases/$(database)/documents/groupNotes/$(noteId)).data.groupId);
        allow read: if isUserAuthenticated() && 
                      isGroupMember(get(/databases/$(database)/documents/groupNotes/$(noteId)).data.groupId);
        allow update, delete: if isUserAuthenticated() && 
                                request.auth.uid == resource.data.userId;
      }
    }
    
    // GROUPS
    match /groups/{groupId} {
      allow create: if isUserAuthenticated() && 
                      request.resource.data.adminIds is list && 
                      request.auth.uid in request.resource.data.adminIds;
      allow read: if isUserAuthenticated() && 
                    (isGroupMember(groupId) || isGroupAdmin(groupId));
      allow update: if isUserAuthenticated() && isGroupAdmin(groupId);
      allow delete: if isUserAuthenticated() && isGroupAdmin(groupId);
      
      // Members subcollection
      match /members/{memberId} {
        allow create: if isUserAuthenticated() && 
                        (memberId == request.auth.uid || isGroupAdmin(groupId));
        allow read: if isUserAuthenticated() && 
                      (isGroupMember(groupId) || isGroupAdmin(groupId));
        allow update: if isUserAuthenticated() && 
                        (memberId == request.auth.uid || isGroupAdmin(groupId));
        allow delete: if isUserAuthenticated() && isGroupAdmin(groupId);
      }
      
      // Group expenses
      match /expenses/{expenseId} {
        allow create: if isUserAuthenticated() && 
                        isGroupMember(groupId) && 
                        request.resource.data.paidBy == request.auth.uid;
        allow read: if isUserAuthenticated() && isGroupMember(groupId);
        allow update: if isUserAuthenticated() && 
                        (request.auth.uid == resource.data.paidBy || isGroupAdmin(groupId));
        allow delete: if isUserAuthenticated() && 
                        (request.auth.uid == resource.data.paidBy || isGroupAdmin(groupId));
      }
      
      // Group activities
      match /activities/{activityId} {
        allow create: if isUserAuthenticated() && isGroupMember(groupId);
        allow read: if isUserAuthenticated() && isGroupMember(groupId);
        allow update: if false;  // Activities should be immutable
        allow delete: if isUserAuthenticated() && isGroupAdmin(groupId);
      }
    }

    // Mặc định cấm
     match /{document=**} {
       allow read, write: if false;
     }

    // ==== HELPER FUNCTIONS ====
    
    // Validate transaction data
    function validateTransactionData(data) {
      let validTransactionTypes = ['income', 'expense', 'transfer', 'borrow', 'lend', 'adjustment'];
      
      // Basic required fields validation
      let hasRequiredFields = data.keys().hasAll(['description', 'amount', 'date', 'typeKey', 'userId']) &&
                              data.description is string && 
                              data.amount is number &&
                              data.typeKey is string;
                              
      // Type-specific validations
      let isValidTransaction = 
        // All non-transfer transactions require a wallet
        ((data.typeKey != 'transfer' && data.wallet is string && data.wallet.size() > 0) ||
        // Transfer requires fromWallet and toWallet
        (data.typeKey == 'transfer' && data.fromWallet is string && data.fromWallet.size() > 0 &&
                                      data.toWallet is string && data.toWallet.size() > 0)) &&
        // Amount must be positive
        data.amount > 0 &&
        // Type must be valid
        validTransactionTypes.hasAny([data.typeKey]);
      
      // Additional validations for special types
      let isValidAdjustment = data.typeKey != 'adjustment' || 
                            (data.typeKey == 'adjustment' && 
                             data.balanceAfter is number);
      
      return hasRequiredFields && isValidTransaction && isValidAdjustment;
    }
    
    // Validate wallet data
    function validateWalletData(data) {
      return data.keys().hasAll(['name', 'balance']) &&
             data.name is string &&
             data.name.size() > 0 &&
             data.balance is number;
    }
    
    // Validate summary data 
    function validateSummaryData(data) {
      return data.keys().hasAll(['userId', 'year', 'month']) &&
             data.userId is string &&
             data.year is string &&
             data.month is string;
    }
    
    function isUserAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isGroupAdmin(groupId) {
      let groupDocPath = /databases/$(database)/documents/groups/$(groupId);
      return isUserAuthenticated() &&
             (
               !exists(groupDocPath) || // Allow if group doesn't exist yet
               (exists(groupDocPath) &&
                get(groupDocPath).data.adminIds is list &&
                request.auth.uid in get(groupDocPath).data.adminIds)
             );
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isGroupMember(groupId) {
      let memberPath = /databases/$(database)/documents/groups/$(groupId)/members/$(request.auth.uid);
      return isUserAuthenticated() &&
             (
               isGroupAdmin(groupId) || // Admins are also members
               (exists(memberPath) && get(memberPath).data.status == 'active')
             );
    }
    
    function isGroupActiveMember(groupId) {
      return isGroupMember(groupId);
    }
  }
}